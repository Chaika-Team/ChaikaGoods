name: Go CI/CD Pipeline

on:
  push:
    branches:
      - CHG-*
      - CHOPS-*
      - fix/*
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.4'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run go fmt
        run: go fmt ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Build
        run: go build -v -o chaika-goods ./cmd

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.4'

      - name: Run Tests
        run: |
          go test ./... -coverprofile=coverage.out

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=ChaikaGoods
            -Dsonar.sources=./internal,./cmd
            -Dsonar.tests=./tests
            -Dsonar.exclusions=**/tests/**,**/*.mock.go,**/*test.go,**/mock_client.go,**/postgres_client.go
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.projectVersion=v0.1.0-alpha

      - name: SonarQube QualityGate 
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build
    env:
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: postgres
      DB_HOST: localhost
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.4'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v7
        with:
          username: ${{ env.DB_USER }}
          password: ${{ env.DB_PASS }}
          database: ${{ env.DB_NAME }}
          port: ${{ env.DB_PORT }}
          postgres-version: "17"
          ssl: false
        id: postgres
      - run: ./scripts/db_restore.sh

      - name: Run Integration Tests
        run: |
          go test -v -tags=integration ./tests/integration_tests
