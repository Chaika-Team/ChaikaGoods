// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chaika-Team/ChaikaGoods/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockGoodsRepository is an autogenerated mock type for the GoodsRepository type
type MockGoodsRepository struct {
	mock.Mock
}

type MockGoodsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoodsRepository) EXPECT() *MockGoodsRepository_Expecter {
	return &MockGoodsRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, p
func (_m *MockGoodsRepository) CreateProduct(ctx context.Context, p *models.Product) (int64, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Product) (int64, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Product) int64); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Product) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockGoodsRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - p *models.Product
func (_e *MockGoodsRepository_Expecter) CreateProduct(ctx interface{}, p interface{}) *MockGoodsRepository_CreateProduct_Call {
	return &MockGoodsRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, p)}
}

func (_c *MockGoodsRepository_CreateProduct_Call) Run(run func(ctx context.Context, p *models.Product)) *MockGoodsRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Product))
	})
	return _c
}

func (_c *MockGoodsRepository_CreateProduct_Call) Return(_a0 int64, _a1 error) *MockGoodsRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_CreateProduct_Call) RunAndReturn(run func(context.Context, *models.Product) (int64, error)) *MockGoodsRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function with given fields: ctx, template
func (_m *MockGoodsRepository) CreateTemplate(ctx context.Context, template *models.Template) error {
	ret := _m.Called(ctx, template)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Template) error); ok {
		r0 = rf(ctx, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoodsRepository_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type MockGoodsRepository_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - template *models.Template
func (_e *MockGoodsRepository_Expecter) CreateTemplate(ctx interface{}, template interface{}) *MockGoodsRepository_CreateTemplate_Call {
	return &MockGoodsRepository_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", ctx, template)}
}

func (_c *MockGoodsRepository_CreateTemplate_Call) Run(run func(ctx context.Context, template *models.Template)) *MockGoodsRepository_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Template))
	})
	return _c
}

func (_c *MockGoodsRepository_CreateTemplate_Call) Return(_a0 error) *MockGoodsRepository_CreateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoodsRepository_CreateTemplate_Call) RunAndReturn(run func(context.Context, *models.Template) error) *MockGoodsRepository_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockGoodsRepository) DeleteProduct(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoodsRepository_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockGoodsRepository_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockGoodsRepository_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockGoodsRepository_DeleteProduct_Call {
	return &MockGoodsRepository_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockGoodsRepository_DeleteProduct_Call) Run(run func(ctx context.Context, id int64)) *MockGoodsRepository_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_DeleteProduct_Call) Return(_a0 error) *MockGoodsRepository_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoodsRepository_DeleteProduct_Call) RunAndReturn(run func(context.Context, int64) error) *MockGoodsRepository_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplate provides a mock function with given fields: ctx, templateID
func (_m *MockGoodsRepository) DeleteTemplate(ctx context.Context, templateID int64) error {
	ret := _m.Called(ctx, templateID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoodsRepository_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type MockGoodsRepository_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID int64
func (_e *MockGoodsRepository_Expecter) DeleteTemplate(ctx interface{}, templateID interface{}) *MockGoodsRepository_DeleteTemplate_Call {
	return &MockGoodsRepository_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", ctx, templateID)}
}

func (_c *MockGoodsRepository_DeleteTemplate_Call) Run(run func(ctx context.Context, templateID int64)) *MockGoodsRepository_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_DeleteTemplate_Call) Return(_a0 error) *MockGoodsRepository_DeleteTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoodsRepository_DeleteTemplate_Call) RunAndReturn(run func(context.Context, int64) error) *MockGoodsRepository_DeleteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *MockGoodsRepository) GetAllProducts(ctx context.Context) ([]models.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockGoodsRepository_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoodsRepository_Expecter) GetAllProducts(ctx interface{}) *MockGoodsRepository_GetAllProducts_Call {
	return &MockGoodsRepository_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts", ctx)}
}

func (_c *MockGoodsRepository_GetAllProducts_Call) Run(run func(ctx context.Context)) *MockGoodsRepository_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGoodsRepository_GetAllProducts_Call) Return(_a0 []models.Product, _a1 error) *MockGoodsRepository_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_GetAllProducts_Call) RunAndReturn(run func(context.Context) ([]models.Product, error)) *MockGoodsRepository_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTemplates provides a mock function with given fields: ctx, limit, offset
func (_m *MockGoodsRepository) GetAllTemplates(ctx context.Context, limit int64, offset int64) ([]models.Template, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTemplates")
	}

	var r0 []models.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]models.Template, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []models.Template); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_GetAllTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTemplates'
type MockGoodsRepository_GetAllTemplates_Call struct {
	*mock.Call
}

// GetAllTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - offset int64
func (_e *MockGoodsRepository_Expecter) GetAllTemplates(ctx interface{}, limit interface{}, offset interface{}) *MockGoodsRepository_GetAllTemplates_Call {
	return &MockGoodsRepository_GetAllTemplates_Call{Call: _e.mock.On("GetAllTemplates", ctx, limit, offset)}
}

func (_c *MockGoodsRepository_GetAllTemplates_Call) Run(run func(ctx context.Context, limit int64, offset int64)) *MockGoodsRepository_GetAllTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_GetAllTemplates_Call) Return(_a0 []models.Template, _a1 error) *MockGoodsRepository_GetAllTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_GetAllTemplates_Call) RunAndReturn(run func(context.Context, int64, int64) ([]models.Template, error)) *MockGoodsRepository_GetAllTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *MockGoodsRepository) GetProductByID(ctx context.Context, id int64) (models.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockGoodsRepository_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockGoodsRepository_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockGoodsRepository_GetProductByID_Call {
	return &MockGoodsRepository_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockGoodsRepository_GetProductByID_Call) Run(run func(ctx context.Context, id int64)) *MockGoodsRepository_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_GetProductByID_Call) Return(_a0 models.Product, _a1 error) *MockGoodsRepository_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_GetProductByID_Call) RunAndReturn(run func(context.Context, int64) (models.Product, error)) *MockGoodsRepository_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsByTemplateID provides a mock function with given fields: ctx, templateID
func (_m *MockGoodsRepository) GetProductsByTemplateID(ctx context.Context, templateID int64) ([]models.TemplateContent, error) {
	ret := _m.Called(ctx, templateID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByTemplateID")
	}

	var r0 []models.TemplateContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.TemplateContent, error)); ok {
		return rf(ctx, templateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.TemplateContent); ok {
		r0 = rf(ctx, templateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TemplateContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_GetProductsByTemplateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsByTemplateID'
type MockGoodsRepository_GetProductsByTemplateID_Call struct {
	*mock.Call
}

// GetProductsByTemplateID is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID int64
func (_e *MockGoodsRepository_Expecter) GetProductsByTemplateID(ctx interface{}, templateID interface{}) *MockGoodsRepository_GetProductsByTemplateID_Call {
	return &MockGoodsRepository_GetProductsByTemplateID_Call{Call: _e.mock.On("GetProductsByTemplateID", ctx, templateID)}
}

func (_c *MockGoodsRepository_GetProductsByTemplateID_Call) Run(run func(ctx context.Context, templateID int64)) *MockGoodsRepository_GetProductsByTemplateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_GetProductsByTemplateID_Call) Return(_a0 []models.TemplateContent, _a1 error) *MockGoodsRepository_GetProductsByTemplateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_GetProductsByTemplateID_Call) RunAndReturn(run func(context.Context, int64) ([]models.TemplateContent, error)) *MockGoodsRepository_GetProductsByTemplateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function with given fields: ctx, id
func (_m *MockGoodsRepository) GetTemplateByID(ctx context.Context, id int64) (models.Template, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 models.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Template, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Template); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Template)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type MockGoodsRepository_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockGoodsRepository_Expecter) GetTemplateByID(ctx interface{}, id interface{}) *MockGoodsRepository_GetTemplateByID_Call {
	return &MockGoodsRepository_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID", ctx, id)}
}

func (_c *MockGoodsRepository_GetTemplateByID_Call) Run(run func(ctx context.Context, id int64)) *MockGoodsRepository_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_GetTemplateByID_Call) Return(_a0 models.Template, _a1 error) *MockGoodsRepository_GetTemplateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_GetTemplateByID_Call) RunAndReturn(run func(context.Context, int64) (models.Template, error)) *MockGoodsRepository_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplates provides a mock function with given fields: ctx
func (_m *MockGoodsRepository) ListTemplates(ctx context.Context) ([]models.Template, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 []models.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Template, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Template); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_ListTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplates'
type MockGoodsRepository_ListTemplates_Call struct {
	*mock.Call
}

// ListTemplates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoodsRepository_Expecter) ListTemplates(ctx interface{}) *MockGoodsRepository_ListTemplates_Call {
	return &MockGoodsRepository_ListTemplates_Call{Call: _e.mock.On("ListTemplates", ctx)}
}

func (_c *MockGoodsRepository_ListTemplates_Call) Run(run func(ctx context.Context)) *MockGoodsRepository_ListTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGoodsRepository_ListTemplates_Call) Return(_a0 []models.Template, _a1 error) *MockGoodsRepository_ListTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_ListTemplates_Call) RunAndReturn(run func(context.Context) ([]models.Template, error)) *MockGoodsRepository_ListTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTemplates provides a mock function with given fields: ctx, searchString, limit, offset
func (_m *MockGoodsRepository) SearchTemplates(ctx context.Context, searchString string, limit int64, offset int64) ([]models.Template, error) {
	ret := _m.Called(ctx, searchString, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchTemplates")
	}

	var r0 []models.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]models.Template, error)); ok {
		return rf(ctx, searchString, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []models.Template); ok {
		r0 = rf(ctx, searchString, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, searchString, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoodsRepository_SearchTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTemplates'
type MockGoodsRepository_SearchTemplates_Call struct {
	*mock.Call
}

// SearchTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - searchString string
//   - limit int64
//   - offset int64
func (_e *MockGoodsRepository_Expecter) SearchTemplates(ctx interface{}, searchString interface{}, limit interface{}, offset interface{}) *MockGoodsRepository_SearchTemplates_Call {
	return &MockGoodsRepository_SearchTemplates_Call{Call: _e.mock.On("SearchTemplates", ctx, searchString, limit, offset)}
}

func (_c *MockGoodsRepository_SearchTemplates_Call) Run(run func(ctx context.Context, searchString string, limit int64, offset int64)) *MockGoodsRepository_SearchTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockGoodsRepository_SearchTemplates_Call) Return(_a0 []models.Template, _a1 error) *MockGoodsRepository_SearchTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoodsRepository_SearchTemplates_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]models.Template, error)) *MockGoodsRepository_SearchTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, p
func (_m *MockGoodsRepository) UpdateProduct(ctx context.Context, p *models.Product) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Product) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoodsRepository_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockGoodsRepository_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - p *models.Product
func (_e *MockGoodsRepository_Expecter) UpdateProduct(ctx interface{}, p interface{}) *MockGoodsRepository_UpdateProduct_Call {
	return &MockGoodsRepository_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, p)}
}

func (_c *MockGoodsRepository_UpdateProduct_Call) Run(run func(ctx context.Context, p *models.Product)) *MockGoodsRepository_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Product))
	})
	return _c
}

func (_c *MockGoodsRepository_UpdateProduct_Call) Return(_a0 error) *MockGoodsRepository_UpdateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoodsRepository_UpdateProduct_Call) RunAndReturn(run func(context.Context, *models.Product) error) *MockGoodsRepository_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoodsRepository creates a new instance of MockGoodsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoodsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoodsRepository {
	mock := &MockGoodsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
