// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chaika-Team/ChaikaGoods/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPackageRepository is an autogenerated mock type for the PackageRepository type
type MockPackageRepository struct {
	mock.Mock
}

type MockPackageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageRepository) EXPECT() *MockPackageRepository_Expecter {
	return &MockPackageRepository_Expecter{mock: &_m.Mock}
}

// CreatePackage provides a mock function with given fields: ctx, pkg
func (_m *MockPackageRepository) CreatePackage(ctx context.Context, pkg *models.Package) error {
	ret := _m.Called(ctx, pkg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Package) error); ok {
		r0 = rf(ctx, pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPackageRepository_CreatePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePackage'
type MockPackageRepository_CreatePackage_Call struct {
	*mock.Call
}

// CreatePackage is a helper method to define mock.On call
//   - ctx context.Context
//   - pkg *models.Package
func (_e *MockPackageRepository_Expecter) CreatePackage(ctx interface{}, pkg interface{}) *MockPackageRepository_CreatePackage_Call {
	return &MockPackageRepository_CreatePackage_Call{Call: _e.mock.On("CreatePackage", ctx, pkg)}
}

func (_c *MockPackageRepository_CreatePackage_Call) Run(run func(ctx context.Context, pkg *models.Package)) *MockPackageRepository_CreatePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Package))
	})
	return _c
}

func (_c *MockPackageRepository_CreatePackage_Call) Return(_a0 error) *MockPackageRepository_CreatePackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRepository_CreatePackage_Call) RunAndReturn(run func(context.Context, *models.Package) error) *MockPackageRepository_CreatePackage_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePackage provides a mock function with given fields: ctx, packageID
func (_m *MockPackageRepository) DeletePackage(ctx context.Context, packageID int64) error {
	ret := _m.Called(ctx, packageID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, packageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPackageRepository_DeletePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePackage'
type MockPackageRepository_DeletePackage_Call struct {
	*mock.Call
}

// DeletePackage is a helper method to define mock.On call
//   - ctx context.Context
//   - packageID int64
func (_e *MockPackageRepository_Expecter) DeletePackage(ctx interface{}, packageID interface{}) *MockPackageRepository_DeletePackage_Call {
	return &MockPackageRepository_DeletePackage_Call{Call: _e.mock.On("DeletePackage", ctx, packageID)}
}

func (_c *MockPackageRepository_DeletePackage_Call) Run(run func(ctx context.Context, packageID int64)) *MockPackageRepository_DeletePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPackageRepository_DeletePackage_Call) Return(_a0 error) *MockPackageRepository_DeletePackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRepository_DeletePackage_Call) RunAndReturn(run func(context.Context, int64) error) *MockPackageRepository_DeletePackage_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPackages provides a mock function with given fields: ctx, limit, offset
func (_m *MockPackageRepository) GetAllPackages(ctx context.Context, limit int64, offset int64) ([]models.Package, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPackages")
	}

	var r0 []models.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]models.Package, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []models.Package); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageRepository_GetAllPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPackages'
type MockPackageRepository_GetAllPackages_Call struct {
	*mock.Call
}

// GetAllPackages is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - offset int64
func (_e *MockPackageRepository_Expecter) GetAllPackages(ctx interface{}, limit interface{}, offset interface{}) *MockPackageRepository_GetAllPackages_Call {
	return &MockPackageRepository_GetAllPackages_Call{Call: _e.mock.On("GetAllPackages", ctx, limit, offset)}
}

func (_c *MockPackageRepository_GetAllPackages_Call) Run(run func(ctx context.Context, limit int64, offset int64)) *MockPackageRepository_GetAllPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockPackageRepository_GetAllPackages_Call) Return(_a0 []models.Package, _a1 error) *MockPackageRepository_GetAllPackages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageRepository_GetAllPackages_Call) RunAndReturn(run func(context.Context, int64, int64) ([]models.Package, error)) *MockPackageRepository_GetAllPackages_Call {
	_c.Call.Return(run)
	return _c
}

// GetPackageByID provides a mock function with given fields: ctx, id
func (_m *MockPackageRepository) GetPackageByID(ctx context.Context, id int64) (models.Package, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageByID")
	}

	var r0 models.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Package, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Package); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageRepository_GetPackageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackageByID'
type MockPackageRepository_GetPackageByID_Call struct {
	*mock.Call
}

// GetPackageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPackageRepository_Expecter) GetPackageByID(ctx interface{}, id interface{}) *MockPackageRepository_GetPackageByID_Call {
	return &MockPackageRepository_GetPackageByID_Call{Call: _e.mock.On("GetPackageByID", ctx, id)}
}

func (_c *MockPackageRepository_GetPackageByID_Call) Run(run func(ctx context.Context, id int64)) *MockPackageRepository_GetPackageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPackageRepository_GetPackageByID_Call) Return(_a0 models.Package, _a1 error) *MockPackageRepository_GetPackageByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageRepository_GetPackageByID_Call) RunAndReturn(run func(context.Context, int64) (models.Package, error)) *MockPackageRepository_GetPackageByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsByPackageID provides a mock function with given fields: ctx, packageID
func (_m *MockPackageRepository) GetProductsByPackageID(ctx context.Context, packageID int64) ([]models.PackageContent, error) {
	ret := _m.Called(ctx, packageID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByPackageID")
	}

	var r0 []models.PackageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.PackageContent, error)); ok {
		return rf(ctx, packageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.PackageContent); ok {
		r0 = rf(ctx, packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PackageContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageRepository_GetProductsByPackageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsByPackageID'
type MockPackageRepository_GetProductsByPackageID_Call struct {
	*mock.Call
}

// GetProductsByPackageID is a helper method to define mock.On call
//   - ctx context.Context
//   - packageID int64
func (_e *MockPackageRepository_Expecter) GetProductsByPackageID(ctx interface{}, packageID interface{}) *MockPackageRepository_GetProductsByPackageID_Call {
	return &MockPackageRepository_GetProductsByPackageID_Call{Call: _e.mock.On("GetProductsByPackageID", ctx, packageID)}
}

func (_c *MockPackageRepository_GetProductsByPackageID_Call) Run(run func(ctx context.Context, packageID int64)) *MockPackageRepository_GetProductsByPackageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPackageRepository_GetProductsByPackageID_Call) Return(_a0 []models.PackageContent, _a1 error) *MockPackageRepository_GetProductsByPackageID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageRepository_GetProductsByPackageID_Call) RunAndReturn(run func(context.Context, int64) ([]models.PackageContent, error)) *MockPackageRepository_GetProductsByPackageID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPackages provides a mock function with given fields: ctx
func (_m *MockPackageRepository) ListPackages(ctx context.Context) ([]models.Package, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPackages")
	}

	var r0 []models.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Package, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Package); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageRepository_ListPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPackages'
type MockPackageRepository_ListPackages_Call struct {
	*mock.Call
}

// ListPackages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRepository_Expecter) ListPackages(ctx interface{}) *MockPackageRepository_ListPackages_Call {
	return &MockPackageRepository_ListPackages_Call{Call: _e.mock.On("ListPackages", ctx)}
}

func (_c *MockPackageRepository_ListPackages_Call) Run(run func(ctx context.Context)) *MockPackageRepository_ListPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPackageRepository_ListPackages_Call) Return(_a0 []models.Package, _a1 error) *MockPackageRepository_ListPackages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageRepository_ListPackages_Call) RunAndReturn(run func(context.Context) ([]models.Package, error)) *MockPackageRepository_ListPackages_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPackages provides a mock function with given fields: ctx, searchString, limit, offset
func (_m *MockPackageRepository) SearchPackages(ctx context.Context, searchString string, limit int64, offset int64) ([]models.Package, error) {
	ret := _m.Called(ctx, searchString, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchPackages")
	}

	var r0 []models.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]models.Package, error)); ok {
		return rf(ctx, searchString, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []models.Package); ok {
		r0 = rf(ctx, searchString, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, searchString, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPackageRepository_SearchPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPackages'
type MockPackageRepository_SearchPackages_Call struct {
	*mock.Call
}

// SearchPackages is a helper method to define mock.On call
//   - ctx context.Context
//   - searchString string
//   - limit int64
//   - offset int64
func (_e *MockPackageRepository_Expecter) SearchPackages(ctx interface{}, searchString interface{}, limit interface{}, offset interface{}) *MockPackageRepository_SearchPackages_Call {
	return &MockPackageRepository_SearchPackages_Call{Call: _e.mock.On("SearchPackages", ctx, searchString, limit, offset)}
}

func (_c *MockPackageRepository_SearchPackages_Call) Run(run func(ctx context.Context, searchString string, limit int64, offset int64)) *MockPackageRepository_SearchPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockPackageRepository_SearchPackages_Call) Return(_a0 []models.Package, _a1 error) *MockPackageRepository_SearchPackages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageRepository_SearchPackages_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]models.Package, error)) *MockPackageRepository_SearchPackages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageRepository creates a new instance of MockPackageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageRepository {
	mock := &MockPackageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
